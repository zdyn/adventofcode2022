#!/usr/bin/env -S deno run --allow-net --allow-read --allow-write

const downloadInput = async (day, filename) => {
  let input;
  try {
    input = await Deno.readTextFile(filename);
  } catch {
    const session = await Deno.readTextFile("session");
    const response = await fetch(`https://adventofcode.com/2022/day/${day}/input`, {
      headers: {cookie: `session=${session}`},
    });
    if (response.status !== 200) throw "Input not available";

    input = await response.text();
    await Deno.writeTextFile(filename, input);
  }
  return input;
};

const formatTime = (time) => {
  const ms = ("00" + time % 1000).slice(-3);
  const s = ("0" + Math.floor(time / 1000) % 60).slice(-2);
  const m = ("0" + Math.floor(time / 1000 / 60) % 60).slice(-2);
  return `${m}:${s}.${ms}`;
};

const measure = (fn) => {
  performance.mark("start");
  const result = fn();
  performance.mark("end");
  return {
    result,
    duration: performance.measure("", "start", "end").duration,
  }
};

try {
  const day = ("0" + Deno.args[0]).slice(-2);
  const filename = `${day}.txt`;
  const input = await downloadInput(Number(day), filename);
  const { fns, samples = [] } = await import(`./${day}.js`);
  const args = [
    ...[].concat(samples).map((s) => [s, true]),
    [input, false],
  ];
  for (const [name, fn] of Object.entries(fns)) {
    for (const arg of args) {
      try {
        const {result, duration} = measure(fn.bind(null, ...arg));
        console.log(formatTime(duration), name, result);
      } catch (error) {
        console.error(error);
      }
    }
  }
} catch (error) {
  console.error(error);
  Deno.exit(1);
}
